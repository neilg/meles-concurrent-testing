/*
 * Meles Concurrent Testing - a library for testing concurrency
 * Copyright (C) 2013 Neil Green
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'pitest'
apply plugin: 'signing'

group = 'com.melessoftware.testing'
archivesBaseName = 'meles-concurrent-testing'
version = '0.2.0-SNAPSHOT'
ext.isReleaseVersion = !version.endsWith("-SNAPSHOT")

repositories {
    mavenCentral()
}

buildscript {
    repositories {
        mavenCentral()
//        mavenLocal()
        //Needed only for SNAPSHOT versions
        //maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:0.30.0'
        classpath 'org.pitest:pitest:0.31'
    }
}

dependencies {
    compile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '1.9.5'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

pitest {
    targetClasses = ['com.melessoftware.*']
    timestampedReports = false
    pitestVersion = '0.31'
    mutators = ['DEFAULTS', 'NON_VOID_METHOD_CALLS']
}

signing {
    sign configurations.archives
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {

        Console console = System.console()
        console.printf "\n\nWe have to sign some things in this build.\n\nPlease enter your signing details.\n\n"

        def password = console.readPassword("PGP Private Key Password: ")

        allprojects { ext."signing.password" = password }

        console.printf "\nThanks.\n\n"
    }
}

if (!hasProperty('sonatypeUsername')) ext.sonatypeUsername = ''
if (!hasProperty('sonatypePassword')) ext.sonatypePassword = ''

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            if (isReleaseVersion) {
                beforeDeployment { deployment -> signing.signPom(deployment) }
            }

            pom.project {
                packaging 'jar'
                name 'Meles Concurrent Testing'
                description 'A library to help with multi-threaded testing in junit'

                url 'https://github.com/neilg/meles-concurrent-testing'

                licenses {
                    license {
                        name 'GNU GENERAL PUBLIC LICENSE Version 3'
                        url 'http://www.gnu.org/licenses/gpl-3.0.txt'
                        distribution 'repo'
                    }
                }

                scm {
                    url 'https://github.com/neilg/meles-concurrent-testing'
                    connection 'scm:git:https://github.com/neilg/meles-concurrent-testing.git'
                    developerConnection 'scm:git:git@github.com:neilg/meles-concurrent-testing.git'
                }

                developers {
                    developer {
                        id 'neilgreen'
                        name 'Neil Green'
                    }
                }
            }

        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
}